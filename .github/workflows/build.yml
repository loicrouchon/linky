name: Build

on: push

jobs:
  env:
    name: Initialize environment
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      gradle-args: ${{ steps.gradle.outputs.args }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: version
        name: Compute application version
        run: |
          echo ${GITHUB_REF#refs/head/}
          if echo ${GITHUB_REF#refs/head/} | grep -q "refs/heads/release/"; then
            VERSION=$(echo ${GITHUB_REF#refs/head/} | grep -Po 'refs/heads/release/\K(.+)')
          else
            VERSION="0-dev-$($GITHUB_SHA | cut -c1-7)"
          fi
          echo ::set-output name=version::$VERSION

      - id: gradle
        name: Compute gradlew args
        run: echo ::set-output name=args::"-Pversion=${{ steps.version.outputs.version }} --console=plain --no-daemon"

      - name: Echo env details
        run: |
          echo "Application version is ${{ steps.version.outputs.version }}"
          echo "Gradle args are: ${{ steps.gradle.outputs.args }}"

  build:
    name: Build & Test
    needs: [ env ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Environment check
        run: ./gradlew -v

      - name: Build application
        run: ./gradlew ${{ needs.env.outputs.gradle-args }} build

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: build/test-results/**/*.xml

      - name: Upload test reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-reports
          path: |
            build/reports
            build/test-results

      - name: Upload distribution
        uses: actions/upload-artifact@v2
        with:
          name: linky-java
          path: build/distributions/linky-*.zip

  package:
    name: Package
    needs: [ env ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - arch: linux-amd64
            os: ubuntu-20.04
            gu-binary: gu
          - arch: macos-x86_64
            os: macos-latest
            gu-binary: gu
    steps:
      - name: Setup Graalvm
        id: setup-graalvm
        uses: DeLaGuardo/setup-graalvm@3.1
        with:
          graalvm-version: '21.0.0.2.java11'

      - name: Install native-image component
        run: |
          ${{ matrix.gu-binary }} install native-image

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Environment check
        run: |
          ./gradlew -v
          native-image --version

      - name: Build application
        run: ./gradlew ${{ needs.env.outputs.gradle-args }} buildNativeImage

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linky-${{ matrix.arch }}
          path: build/libs/linky

  package-linux:
    name: Linux packaging
    runs-on: ubuntu-20.04
    needs: [ env, package ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: linky-linux-amd64
          path: build/libs/

      - name: Build debian package application
        run: ./gradlew ${{ needs.env.outputs.gradle-args }} buildDebianPackage

      - name: Debian package installation verification
        run: sudo dpkg -i build/packaging/linky_${{ needs.env.outputs.version }}_amd64.deb

      - name: Debian package post-installation verification
        run: linky --version

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linky_${{ needs.env.outputs.version }}_amd64.deb
          path: build/packaging/linky_${{ needs.env.outputs.version }}_amd64.deb

  release:
    # This is done as a separate task from the package step
    # so that we only create the release if all packaging jobs succeeded
    name: Release
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      tag: ${{ steps.tag.outputs.tag }}

    if: startsWith(github.ref, 'refs/head/release/')
    needs: [ env, build, package, package-linux]

    runs-on: ubuntu-20.04
    steps:
      - name: Echo branch
        run: echo ${GITHUB_REF#refs/head/}

      - name: Checkout code
        uses: actions/checkout@v2

      - id: tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}

      - id: create-release
        name: Create Release ${{ steps.tag.outputs.tag }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}

  upload-release-assets:
    name: Upload release assets
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        artifact: [ linky-linux-amd64, linky-macos-x86_64 ]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: artifacts/

      - name: Compute checksum
        run: |
          find artifacts
          cd artifacts/
          sha256sum * > ${{ matrix.artifact }}.sha256sum

      - name: Upload release asset checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_name: ${{ matrix.artifact }}-${{ needs.release.outputs.tag }}.sha256sum.txt
          asset_path: artifacts/${{ matrix.artifact }}.sha256sum
          asset_content_type: text/plain

      - name: Compress assets
        run: |
          find artifacts
          cd artifacts
          zip ${{ matrix.artifact }}.zip linky

      - name: Upload assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_name: ${{ matrix.artifact }}-${{ needs.release.outputs.tag }}.zip
          asset_path: artifacts/${{ matrix.artifact }}.zip
          asset_content_type: application/zip
