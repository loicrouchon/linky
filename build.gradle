plugins {
    id 'application'
}

group = 'org.linky'
version = '0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    modularity.inferModulePath = true
}
def mainClassName = 'org.linky.cli.Main'
application {
    mainModule = 'linky'
    mainClass = mainClassName
    applicationDefaultJvmArgs = [
            // the cli is short lived, so let's enable a fast JVM startup
            '-XX:TieredStopAtLevel=1'
    ]
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

test {
    useJUnitPlatform()
}
repositories {
    mavenCentral()
}

dependencies {
    def lombokVersion = "1.18.16"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    def picocliVersion = "4.5.2"
    implementation "info.picocli:picocli:${picocliVersion}"
    annotationProcessor "info.picocli:picocli-codegen:${picocliVersion}"
    // testing
    def junitVersion = "5.5.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:3.14.0"
    def mockitoVersion = '3.6.28'
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
}

task buildNativePackage(type: Exec) {
    workingDir "${buildDir}"

    commandLine "jpackage",
            "--name",
            "${project.name}",
            "--app-version",
            "${project.version}",
            "--module-path",
            "install/${project.name}/lib",
            "-m",
            "${project.name}/${mainClassName}",
            "--license-file",
            "../LICENSE",
            "--dest",
            "."
}
buildNativePackage.dependsOn installDist

task buildNativeImage(type: Exec) {
    workingDir "${buildDir}/libs"

    commandLine "native-image",
            "--verbose",
            "--no-fallback",
            "-H:Name=${project.name}",
            "-H:-AddAllCharsets",
            "-H:-UseServiceLoaderFeature",
            "-J-Drx.unsafe-disable=true",
            "-O1",
            "--no-server",
            "--initialize-at-build-time",
            "-DremoveUnusedAutoconfig=true",
            "--report-unsupported-elements-at-runtime", // reflection features not used in native-image mode
            "-cp", "${buildDir}/install/${project.name}/lib/*",
            "${mainClassName}"
}
buildNativeImage.dependsOn installDist
